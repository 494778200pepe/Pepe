================================================================================
= 题目: 两个大的整数相减之差
= 日期: 2017.07.03
================================================================================

*. 题目描述
    给定两个大的整数，每个整数以组合 BCD 码串存放，求两个整数之差，结果也以组合
BCD 码串存放，以及结果的正整数码串大于一个字节时第一个字节必须非 0。当第一字节为
FF 时，表示 BCD 码串为负整数。组合 BCD 码是将两位十进制数，存放在一个字节中。例：
    82  的 BCD 码存放二进制格式为: 10000010
    789 的 BCD 码存放二进制格式为: 00000111 10001001
    5678的 BCD 码存放二进制格式为: 01010110 01111000

    由于编码是将每个十进制数用一组 4 位二进制数来表示，因此若将这种 BCD 码直接交
计算机去运算，由于计算机总是把数当作二进制数来运算，所以结果可能会出错，例如：用
BCD 码求 48-39。解决的办法是对二进制减法运算的结果采用减 6 修正,这种修正称为 BCD
调整。即将二进制减法运算的结果修正为 BCD 码减法运算的结果，两个两位 BCD 数相减时，
对二进制减法运算结果采用修正规则进行修正。
   修正规则：如果任何两个对应位BCD数相减的结果向高一位有借位时，则该位进行减6修
             正，否则该位不需修正。

*. 注意事项
   a. 返回结果若为负数时，第一字节必须为 FF，且后跟正整数 BCD 码串；
   b. 返回结果的正整数 BCD 码串大于一个字节时第一个字节不能为 0；
   c. 除了首字节可能为 FF 之外，每个字节存放 2 个十进制数；
   d. 正整数BCD码串按十进制数的从高到低存放，若为奇数位数时，第一字节的高4位为0；
   e. SubBCDInt 为基础函数，故在 Java 中不允许使用 BigInteger 等类。

*. 示例
   -----------------------------------------------------------------------------
   num1                 num2                       dest                      ret
   -----------------------------------------------------------------------------
   000012345678901234   0999999999999987654321     FF0999999987654308753087   12
   FF0012345678901234   ff0999999999999987654321   0999999987654308753087     11
   12345678f01234       010123419992                                          -1
   1234157788           0012341234a0                                          -2
   12345678             (null)                                                -3
   (null)               12345678                                              -3
   -----------------------------------------------------------------------------

1. C 描述, 代码文件名为: "SubBCDInt.c"
   /*
   两个大的整数相减之差, 其中:
   参数:
      num1     整数的BCD码串1
      size1    BCD码串1的字节数
      num2     整数的BCD码串2
      size2    BCD码串2的字节数
      dest     存放结果BCD码串的缓冲区
      size     传入 dest 缓冲区的尺寸
   返回值:
      -3       相减失败, 参数不合法
      -2       相减失败, BCD码串2存在不合法字符
      -1       相减失败, BCD码串1存在不合法字符
       0       相减失败, 结果BCD码串的缓冲区尺寸太小
      >0       相减成功, 返回BCD码串的字节数
   */
   int SubBCDInt(const void* num1, int size1, const void* num2, int size2,
                       void* dest, int size)
   {
      // ??? ... ...
   }

2. C++ 描述, 代码文件名为: "SubBCDInt.cpp"
   /*
   两个大的整数相减之差, 其中:
   参数:
      ANum1    整数的BCD码串1
      ASize1   BCD码串1的字节数
      ANum2    整数的BCD码串2
      ASize2   BCD码串2的字节数
      ADest    存放结果BCD码串的缓冲区
      ASize    传入 ADest 缓冲区的尺寸
   返回值:
      -3       相减失败, 参数不合法
      -2       相减失败, BCD码串2存在不合法字符
      -1       相减失败, BCD码串1存在不合法字符
       0       相减失败, 结果BCD码串的缓冲区尺寸太小
      >0       相减成功, 返回BCD码串的字节数
   */
   int SubBCDInt(const Byte* ANum1, int ASize1, const Byte* ANum2, int ASize2,
                       Byte* ADest, int ASize)
   {
      // ??? ... ...
   }

3. Delphi 描述, 代码文件名为: "SubBCDInt.pas"
   (*
   两个大的整数相减之差, 其中:
   参数:
      ANum1    整数的BCD码数组1
      ANum2    整数的BCD码数组2
      ADest    存放结果BCD码数组
   返回值:
      -3       相减失败, 参数不合法
      -2       相减失败, BCD码数组2存在不合法字符
      -1       相减失败, BCD码数组1存在不合法字符
       0       相减失败, 结果BCD码串的数组尺寸太小
      >0       相减成功, 返回BCD码串的字节数
   *)
   function SubBCDInt(const ANum1, ANum2: array of Byte;
                               var ADest: array of Byte): Integer;
   begin
      // ??? ... ...
   end;

4. Java 描述, 代码文件名为: "SubBCDInt.java"
   /*
   两个大的整数相减之差, 其中:
   参数:
      num1     整数的BCD码数组1
      num2     整数的BCD码数组2
      dest     存放结果BCD码数组
   返回值:
      -3       相减失败, 参数不合法
      -2       相减失败, BCD码数组2存在不合法字符
      -1       相减失败, BCD码数组1存在不合法字符
       0       相减失败, 结果BCD码串的数组太小
      >0       相减成功, 返回BCD码串的字节数
   */
   public static int SubBCDInt(final byte[] num1, final byte[] num2, byte[] dest)
   {
      // ??? ... ...
   }
