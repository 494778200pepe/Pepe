================================================================================
= 题目: 两个大的正整数相加之和
= 日期: 2017.06.01
================================================================================

*. 题目描述
    给定两个大的正整数，每个整数以组合 BCD 码串存放，求两个正整数之和，结果也以
组合 BCD 码串存放，以及结果的第一个字节必须非 0。组合 BCD 码是将两位十进制数，存
放在一个字节中。例：
    82  的 BCD 码存放二进制格式为: 10000010
    789 的 BCD 码存放二进制格式为: 00000111 10001001
    5678的 BCD 码存放二进制格式为: 01010110 01111000

    由于编码是将每个十进制数用一组 4 位二进制数来表示，因此若将这种 BCD 码直接交
计算机去运算，由于计算机总是把数当作二进制数来运算，所以结果可能会出错，例如：用
BCD 码求 38+49。解决的办法是对二进制加法运算的结果采用加 6 修正,这种修正称为 BCD
调整。即将二进制加法运算的结果修正为 BCD 码加法运算的结果，两个两位 BCD 数相加时，
对二进制加法运算结果采用修正规则进行修正。修正规则：
   a. 如果任何两个对应位BCD数相加的结果向高一位无进位，若得到的结果小于或等于9，
      则该位不需修正；若得到的结果大于9且小于16时，该位进行加6修正。
   b. 如果任何两个对应位BCD数相加的结果向高一位有进位时(即结果大于或等于16，注意
      不是修正时的进位)，该位进行加6修正。
   c. 低位修正结果使高位大于9时，高位进行加6修正。

*. 注意事项
   a. 返回结果的 BCD 码串第一个字节不能为 0；
   b. 每个字节存放 2 个十进制数；
   c. BCD 码串按十进制数的从高到低存放，若为奇数位数时，第一字节的高 4 位为 0；
   d. AddBCDInt 为基础函数，故在 Java 中不允许使用 BigInteger 等类。

*. 示例
   -----------------------------------------------------------------------------
   num1                 num2                       dest                      ret
   -----------------------------------------------------------------------------
   000012345678901234   0999999999999987654321     1000000012345666555555     11
   12345678f01234       010123419992                                          -1
   1234157788           0012341234a0                                          -2
   12345678             (null)                                                -3
   (null)               12345678                                              -3
   -----------------------------------------------------------------------------

1. C 描述, 代码文件名为: "AddBCDInt.c"
   /*
   两个大的正整数相加之和, 其中:
   参数:
      num1     整数的BCD码串1
      size1    BCD码串1的字节数
      num2     整数的BCD码串2
      size2    BCD码串2的字节数
      dest     存放结果BCD码串的缓冲区
      size     传入 dest 缓冲区的尺寸
   返回值:
      -3       相加失败, 参数不合法
      -2       相加失败, BCD码串2存在不合法字符
      -1       相加失败, BCD码串1存在不合法字符
       0       相加失败, 结果BCD码串的缓冲区尺寸太小
      >0       相加成功, 返回BCD码串的字节数
   */
   int AddBCDInt(const void* num1, int size1, const void* num2, int size2,
                       void* dest, int size)
   {
      // ??? ... ...
   }

2. C++ 描述, 代码文件名为: "AddBCDInt.cpp"
   /*
   两个大的正整数相加之和, 其中:
   参数:
      ANum1    整数的BCD码串1
      ASize1   BCD码串1的字节数
      ANum2    整数的BCD码串2
      ASize2   BCD码串2的字节数
      ADest    存放结果BCD码串的缓冲区
      ASize    传入 ADest 缓冲区的尺寸
   返回值:
      -3       相加失败, 参数不合法
      -2       相加失败, BCD码串2存在不合法字符
      -1       相加失败, BCD码串1存在不合法字符
       0       相加失败, 结果BCD码串的缓冲区尺寸太小
      >0       相加成功, 返回BCD码串的字节数
   */
   int AddBCDInt(const Byte* ANum1, int ASize1, const Byte* ANum2, int ASize2,
                       Byte* ADest, int ASize)
   {
      // ??? ... ...
   }

3. Delphi 描述, 代码文件名为: "AddBCDInt.pas"
   (*
   两个大的正整数相加之和, 其中:
   参数:
      ANum1    整数的BCD码数组1
      ANum2    整数的BCD码数组2
      ADest    存放结果BCD码数组
   返回值:
      -3       相加失败, 参数不合法
      -2       相加失败, BCD码数组2存在不合法字符
      -1       相加失败, BCD码数组1存在不合法字符
       0       相加失败, 结果BCD码串的数组尺寸太小
      >0       相加成功, 返回BCD码串的字节数
   *)
   function AddBCDInt(const ANum1, ANum2: array of Byte;
                               var ADest: array of Byte): Integer;
   begin
      // ??? ... ...
   end;

4. Java 描述, 代码文件名为: "AddBCDInt.java"
   /*
   两个大的正整数相加之和, 其中:
   参数:
      num1     整数的BCD码数组1
      num2     整数的BCD码数组2
      dest     存放结果BCD码数组
   返回值:
      -3       相加失败, 参数不合法
      -2       相加失败, BCD码数组2存在不合法字符
      -1       相加失败, BCD码数组1存在不合法字符
       0       相加失败, 结果BCD码串的数组太小
      >0       相加成功, 返回BCD码串的字节数
   */
   public static int AddBCDInt(final byte[] num1, final byte[] num2, byte[] dest)
   {
      // ??? ... ...
   }
